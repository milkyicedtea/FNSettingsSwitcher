from Utils.decoder import decode


def performance() -> str:
    string = ""
    return decode(string)


def dx12() -> str:
    string = "Wy9TY3JpcHQvRm9ydG5pdGVHYW1lLkZvcnRHYW1lVXNlclNldHRpbmdzXQpGb3J0bml0ZVJlbGVhc2VWZXJzaW9uPTcKVW5sb2NrQ29uc29sZUZQUz1GYWxzZQpTdWJHYW1lU2VsZWN0Q291bnRfQXRoZW5hPTI4NQpTdWJHYW1lTGFzdFNlbGVjdGVkVGltZV9BdGhlbmE9MjAyMy4xMi4yMy0xNi4wNS4zMQpTdWJHYW1lU2VsZWN0Q291bnRfQ2FtcGFpZ249MTgKU3ViR2FtZUxhc3RTZWxlY3RlZFRpbWVfQ2FtcGFpZ249MjAyMy4xMS4zMC0xOC4xNC41MwpMYXN0VGltZVNldHRpbmdzU25hcHNob3RVcGxvYWRlZD0yMDIzLjEyLjIzLTE1LjA0LjE0CkZpcnN0TG9naW5PbkRldmljZT0yMDIzLjA0LjI2LTE4LjAwLjQxClNhZmVab25lPTEuMDAwMDAwCmJJc1NhZmVab25lU2V0PUZhbHNlCkNhY2hlZFBsYXllckxldmVsPTEyCmJTaG93QWN0b3JzV2l0aFNlYXNvbkl0ZW1UYWdNYXBJbmRpY2F0b3JzPVRydWUKQ2FjaGVkQmF0dGxlU3RhcnM9MApDYWNoZWRBbGllblN0eWxlUG9pbnRzPTAKQ2FjaGVkU3R5bGVQb2ludHM9MApDYWNoZWRDbGFpbWFibGVSZXdhcmRzPSgoIlJld2FyZCIsIDMpLCgiQm9udXMiLCAwKSwoIldlZWtseSIsIDApKQpDYWNoZWRIaWdoZXN0QmF0dGxlUGFzc1VubG9ja2VkUGFnZT0xNApiU2hvd0NhcmVlclRhYkJhbmc9RmFsc2UKQ3VzdG9tVm9pY2VDaGF0SW5wdXREZXZpY2U9CkN1c3RvbVZvaWNlQ2hhdE91dHB1dERldmljZT0KQ3VzdG9tVm9pY2VDaGF0SW5wdXREZXZpY2VJZD0iezFlNWI5ZWFmLTAyNDAtNDJkOS05YjJjLWZkMWE5ODcxZTg5N30iCkN1c3RvbVZvaWNlQ2hhdE91dHB1dERldmljZUlkPSJ7MC4wLjAuMDAwMDAwMDB9Lns3YzRlZDdkYy0xMGYyLTRkNjAtYTk1MC04YTRiN2QyNTE0MDd9IgpiTW90aW9uQmx1cj1GYWxzZQpiU2hvd0dyYXNzPVRydWUKYlNob3dGUFM9VHJ1ZQpiVXNlR1BVQ3Jhc2hEZWJ1Z2dpbmc9RmFsc2UKYlN0b3BSZW5kZXJpbmdJbkJhY2tncm91bmQ9RmFsc2UKYkxhdGVuY3lUd2VhazE9RmFsc2UKTGF0ZW5jeVR3ZWFrMj0yCmJMYXRlbmN5Rmxhc2g9RmFsc2UKRm9ydEFudGlBbGlhc2luZ01ldGhvZD1UU1JFcGljClRlbXBvcmFsU3VwZXJSZXNvbHV0aW9uUXVhbGl0eT1DdXN0b20KRExTU1F1YWxpdHk9MApiVXNlTmFuaXRlPVRydWUKRGVzaXJlZEdsb2JhbElsbHVtaW5hdGlvblF1YWxpdHk9MgpEZXNpcmVkUmVmbGVjdGlvblF1YWxpdHk9MgpQcmVOYW5pdGVHbG9iYWxJbGx1bWluYXRpb25RdWFsaXR5PTEKUHJlTmFuaXRlUmVmbGVjdGlvblF1YWxpdHk9MQpiUmF5VHJhY2luZz1UcnVlCmIxMjBGcHNNb2RlPUZhbHNlCkZyb250ZW5kRnJhbWVSYXRlTGltaXQ9MTIwCmJJc0VuZXJneVNhdmluZ0VuYWJsZWRJZGxlPVRydWUKYklzRW5lcmd5U2F2aW5nRW5hYmxlZEZvY3VzTG9zcz1GYWxzZQpFbmVyZ3lTYXZpbmdMZXZlbEZvY3VzTG9zcz0xCkRpc3BsYXlHYW1tYT0yLjIwMDAwMApVc2VySW50ZXJmYWNlQ29udHJhc3Q9MS4wMDAwMDAKTmFtZWRUaW1lcz0oKCJTZWFzb240X1BhZ2VXaXRoTGV2ZWwxIiwgMjAyMy4wOC4xMC0xOC41Ni4xOSksKCJTZWFzb240X1BhZ2VXaXRoTGV2ZWw4IiwgMjAyMy4wOC4xMC0xOS4wOC4xMSksKCJTZWFzb240X1BhZ2VXaXRoTGV2ZWwxNiIsIDIwMjMuMDguMTAtMTkuMDguMTMpLCgiU2Vhc29uNF9QYWdlV2l0aExldmVsMjQiLCAyMDIzLjA4LjEwLTE5LjA4LjE2KSwoIlNlYXNvbjRfUGFnZVdpdGhMZXZlbDMyIiwgMjAyMy4wOC4xMC0xOS4wOC4xOSksKCJTZWFzb240X1BhZ2VXaXRoTGV2ZWw0MCIsIDIwMjMuMDguMTAtMTkuMDguMjApLCgiU2Vhc29uNF9QYWdlV2l0aExldmVsNDgiLCAyMDIzLjA4LjEwLTE5LjA4LjIxKSwoIlNlYXNvbjRfUGFnZVdpdGhMZXZlbDU2IiwgMjAyMy4wOC4xMC0xOS4wOC4yMiksKCJTZWFzb240X1BhZ2VXaXRoTGV2ZWw2NCIsIDIwMjMuMDguMTAtMTkuMDguMjIpLCgiU2Vhc29uNF9QYWdlV2l0aExldmVsNzIiLCAyMDIzLjA4LjEwLTE5LjA4LjMwKSwoIlNlYXNvbjRfUGFnZVdpdGhMZXZlbDgwIiwgMjAyMy4wOC4xMC0xOS4wOC4zMSksKCJTZWFzb240X1BhZ2VXaXRoTGV2ZWw4OCIsIDIwMjMuMDguMTAtMTkuMDguMzQpLCgiU2Vhc29uNF9QYWdlV2l0aExldmVsOTYiLCAyMDIzLjA4LjEwLTE5LjA4LjQ1KSwoIlNlYXNvbjdfUGFnZVdpdGhMZXZlbDk2IiwgMjAyMy4wOC4xNS0yMy4yOC4wMiksKCJTZWFzb243X1BhZ2VXaXRoTGV2ZWw4OCIsIDIwMjMuMDguMTUtMjMuMzYuNDQpLCgiU2Vhc29uNV9QYWdlV2l0aExldmVsMSIsIDIwMjMuMDkuMDMtMTguMDQuNDMpKQpOYW1lZENvdW50cz0oKCJEaXNjb3ZlcnlMb2JieU1hdGNobWFraW5nUGxheSIsIDI2KSwoIkRpc2NvdmVyeUxvYmJ5TWF0Y2htYWtpbmdQbGF5X0hvdGZpeFZlciIsIDApLCgibGFzdGZyb250ZW5kZmxvd19Gb3J0bml0ZSIsIDI4KSwoImxhc3Rmcm9udGVuZGZsb3dfRm9ydG5pdGVfSG90Zml4VmVyIiwgMCksKCJVRW5hYmxlTXVsdGlGYWN0b3JNb2RhbDo6U2hvdWxkU2hvd01GQVNwbGFzaFNjcmVlbiIsIDI4KSwoIlVFbmFibGVNdWx0aUZhY3Rvck1vZGFsOjpTaG91bGRTaG93TUZBU3BsYXNoU2NyZWVuX0hvdGZpeFZlciIsIDApLCgiRnJvbnRlbmRDb250ZXh0OlNob3VsZFNob3dTb2NpYWxJbXBvcnQiLCAyNyksKCJGcm9udGVuZENvbnRleHQ6U2hvdWxkU2hvd1NvY2lhbEltcG9ydF9Ib3RmaXhWZXIiLCAwKSwoIlNlYXNvbkFib3V0UG9wdXAiLCAxKSwoIkVjb3N5c3RlbVRyYWlsZXIiLCAxKSwoIkVjb3N5c3RlbVRyYWlsZXJfSG90Zml4VmVyIiwgMCksKCJTZWFzb25UcmFpbGVyIiwgMjgpLCgiU2Vhc29uVHJhaWxlcl9Ib3RmaXhWZXIiLCAwKSwoInMyOF9KdW5vX0ZUVUUiLCAxKSwoInMyOF9KdW5vX0ZUVUVfSG90Zml4VmVyIiwgMCkpCkJhdHRsZVBhc3NPdmVycmlkZVRyYWNrZXI9MApOZXdlc3RQcm9ncmVzc2l2ZUNvc21ldGljU2V0U2Vlbj1CQTNEQkFBQjQzRTc0MTFFREZBNjhEODUzRjgxMjM1NApDdXJyZW50TG9ja2VyU29ydHM9KChQaWNrYXhlLCBCeVJlbGVhc2VEYXRlKSwoR2xpZGVyLCBCeVJlbGVhc2VEYXRlKSwoRGFuY2UsIEludmFsaWQpLChCYWNrcGFjaywgSW52YWxpZCksKENoYXJhY3RlciwgSW52YWxpZCksKExvYWRpbmdTY3JlZW4sIEJ5UmVsZWFzZURhdGUpLChJdGVtV3JhcCwgSW52YWxpZCksKFNreURpdmVDb250cmFpbCwgQnlTZXQpLChNdXNpY1BhY2ssIEludmFsaWQpKQpiSGFzVXNlZEJhdHRsZVBhc3NDcmV3VXBzZWxsTmF2QnV0dG9uPVRydWUKYkhhc1NlZW5Mb2NrZXJBcmNoaXZpbmdDbGVhbnVwVG9vbHRpcD1UcnVlCmJIYXNTZWVuR2VuZXJhbEFyY2hpdmVNb2RlVG9vbHRpcD1GYWxzZQpiSGFzU2VlbkVtb3Rlc0FyY2hpdmVNb2RlVG9vbHRpcD1GYWxzZQpiSGFzU2VlbkFyY2hpdmVGaWx0ZXJUb29sdGlwPUZhbHNlCmJIYXNTZWVuQXJjaGl2ZWRJdGVtc1Rvb2x0aXA9RmFsc2UKYkhhc1VzZXJTZWVuUXVpY2tTYXZlVG9vbHRpcD1UcnVlCmJIYXNTZWVuRG9udXRTaG9wU2VxdWVuY2U9RmFsc2UKRG9udXRJZGxlR2FtZUhpZ2hTY29yZT0wLjAwMDAwMApEaXNwbGF5QXNzZXRQYXRoVG9PZmZlclNlZW5MZXZlbD0oKQpJdGVtU2hvcFNlY3Rpb25zU2VlblN0YXRlTGFzdFJlc2V0RGF0ZXM9KCgiRGFpbHkiLCAwMDAxLjAxLjAxLTAwLjAwLjAwKSwoIkxpbWl0ZWRUaW1lIiwgMDAwMS4wMS4wMS0wMC4wMC4wMCksKCJTdWJzY3JpcHRpb24iLCAwMDAxLjAxLjAxLTAwLjAwLjAwKSwoIkJhdHRsZVBhc3MiLCAwMDAxLjAxLjAxLTAwLjAwLjAwKSwoIkxVUVAiLCAwMDAxLjAxLjAxLTAwLjAwLjAwKSwoIkFsYW5XYWtlQiIsIDAwMDEuMDEuMDEtMDAuMDAuMDApLCgic3BlY2lhbDIiLCAwMDAxLjAxLjAxLTAwLjAwLjAwKSwoIlNwZWNpYWwiLCAwMDAxLjAxLjAxLTAwLjAwLjAwKSwoIkZlYXR1cmVkNCIsIDAwMDEuMDEuMDEtMDAuMDAuMDApLCgiRmVhdHVyZWQyIiwgMDAwMS4wMS4wMS0wMC4wMC4wMCksKCJGZWF0dXJlZDMiLCAwMDAxLjAxLjAxLTAwLjAwLjAwKSkKTGFzdFNlbGVjdGVkUGxheWxpc3Q9KFBsYXlsaXN0TmFtZT0iUGxheWxpc3RfRGVmYXVsdFNvbG8iLFRvdXJuYW1lbnRJZD0iIixFdmVudFdpbmRvd0lkPSIiLExpbmtJZD0oTW5lbW9uaWM9InBsYXlsaXN0X2RlZmF1bHRzb2xvIixWZXJzaW9uPS0xKSxiR3JhY2VmdWxseVVwZ3JhZGVkPUZhbHNlLE1hdGNobWFraW5nUnVsZVByZXNldD1SZXNwZWN0UGFydGllcykKTGFzdFNlbGVjdGVkRmlsbE9wdGlvbj1GYWxzZQpiTGFzdFNlbGVjdGVkUHJpdmF0ZU1hdGNoT3B0aW9uPVRydWUKQ3VzdG9tTWF0Y2hPcHRpb25zPSgpCkNyZWF0aXZlT3B0aW9ucz0oKCJDcmVhdGl2ZU9wdGlvbl9FZGl0b3JDYW1lcmEiLCAwKSwoIkNyZWF0aXZlT3B0aW9uX1BoYXNlIiwgMSksKCJDcmVhdGl2ZU9wdGlvbl9JbnZ1bG5lcmFibGUiLCAwKSwoIkNyZWF0aXZlT3B0aW9uX0ZsaWdodFNwZWVkIiwgNCksKCJDcmVhdGl2ZU9wdGlvbl9QaG9uZVRvb2xCaW5kaW5nIiwgMSksKCJDcmVhdGl2ZU9wdGlvbl9Db2xsaXNpb24iLCAxKSwoIkNyZWF0aXZlT3B0aW9uX0lnbm9yZUNvbGxpc2lvblRpbWUiLCAxKSkKYkhhc1NlZW5DcmVhdGl2ZVBob25lVHV0b3JpYWw9RmFsc2UKYkhhc1NlZW5DcmVhdGl2ZUhlYXRtYXBUdXRvcmlhbD1GYWxzZQpDcmVhdGl2ZU9wdGlvbkxhc3RVc2VkQ2F0ZWdvcnk9MApDcmVhdGl2ZU9wdGlvbkxhc3RVc2VkSW5kZXhJbkNhdGVnb3J5PTAKTGFzdFNlbGVjdGVkQ2hpbGRBY3Rpdml0eU1hcD0oKCJzZXRfaGFiYW5lcm9fcGxheWxpc3RzIiwgInBsYXlsaXN0X2hhYmFuZXJvc29sbyIpLCgic2V0X2JyX3BsYXlsaXN0cyIsICJwbGF5bGlzdF9kZWZhdWx0c29sbyIpLCgic2V0X25vYnVpbGRfcGxheWxpc3RzIiwgInBsYXlsaXN0X25vYnVpbGRicl9zcXVhZCIpLCgiIiwgIjYxMDYtOTIyOS00MjA4IiksKCIwMzE1LTE1MzUtMjAwNCIsICIwMzE1LTE1MzUtMjAwNCIpKQpMYXN0TmV3c1ZlcnNpb25WaWV3ZWRCUj0yMDIzLTA5LTAyVDE2OjEzOjQzLjY4MVoKTGFzdE5ld3NWZXJzaW9uVmlld2VkQ3JlYXRpdmU9Ckxhc3ROZXdzVmVyc2lvblZpZXdlZFNUVz0KTGFzdFBSTUV0YWc9ZTA1YTcyY2JiMTAxODdhZmJkMTg3Yjc5Yzk4ZWUyZTEKTGFzdEZyb250RW5kQmFja1BsYXRlU3RhZ2VVc2VkWzBdPWRlZmF1bHRub3RyaXMKTGFzdEZyb250RW5kQmFja1BsYXRlU3RhZ2VVc2VkWzFdPWRlZmF1bHQKYkV1bGFBY2NlcHRlZD1UcnVlCkV1bGFBY2NlcHRlZFVzZXJJZD05NDVkMjMyNDRiZTE0MTU4OWYwM2Y3YmM2ODBkNTQ0ZQpMYXN0RXVsYUNoZWNrVGltZT0yMDIzLjEyLjIyLTE4LjEyLjMxCkhVRExheW91dERhdGFbMF09KExheW91dEVudHJpZXM9KQpIVURMYXlvdXREYXRhWzFdPShMYXlvdXRFbnRyaWVzPSkKSFVETGF5b3V0RGF0YVsyXT0oTGF5b3V0RW50cmllcz0pCkFjdGl2ZUhVRFByb2ZpbGVJZGVudGlmaWVyPShIVURQcm9maWxlVHlwZT0oVGFnTmFtZT0iIiksR3VpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCkKYlRpbWVzU2VlbkJhY2NodXNMb2FkVHV0b3JpYWw9MApiSGFzU2VlblRhcFRvU2hvb3Q9RmFsc2UKTnVtVGltZXNTZWVpbmdQYW5uaW5nVGlwPTAKRmlyZU1vZGVEYXRhPShiQXV0b0ZpcmVJc0VuYWJsZWQ9VHJ1ZSxiM0RUb3VjaEVuYWJsZWQ9RmFsc2UsYlRhcFRvU2hvb3RFbmFibGVkPUZhbHNlLGJBbHdheXNTaG93RGVkaWNhdGVkQnV0dG9uPVRydWUsRmlyZU1vZGVUeXBlPVVuc2V0KQpTaW1wbGVNb2JpbGVTdGF0cz0oR2FtZXNQbGF5ZWQ9MTEzMSxTZWNvbmRzUGxheWVkPTUwMjg1NSxLaWxsQ291bnQ9MzExOSxCZXN0UmVzdWx0PTAsTGFzdFJldmlld1Byb21wdERheT0wMDAxLjAxLjAxLTAwLjAwLjAwLENhbXBhaWduR2FtZXNQbGF5ZWQ9MzYpCkF1ZGlvT3V0cHV0RGV2aWNlSWQ9InswLjAuMC4wMDAwMDAwMH0uezdjNGVkN2RjLTEwZjItNGQ2MC1hOTUwLThhNGI3ZDI1MTQwN30iCmJVc2VIZWFkcGhvbmVNb2RlPUZhbHNlCkluaXRpYWxCZW5jaG1hcmtTdGF0ZT0xCmJEaXNhYmxlTW91c2VBY2NlbGVyYXRpb249RmFsc2UKQ2hvc2VuTG9naW5UeXBlPU5vbmUKU29jaWFsSW1wb3J0T3B0ZWRPdXRWZXJzaW9uPTEKVktJbXBvcnRPcHRlZE91dFZlcnNpb249MApiSGFzU2VlbkVyZWJ1c1NvY2lhbEltcG9ydD1GYWxzZQpiSGFzU2VlbkZyaWVuZEltcG9ydFRvYXN0PUZhbHNlCkxhc3RTb2NpYWxJbXBvcnRQcm9tcHRUaW1lPTIwMjMuMDQuMjYtMTguMDMuNDMKYkF1dG9JbXBvcnRGcmllbmRFbmFibGVkPUZhbHNlCmJTZWVuTGV0b1NlbGxNb2RhbD1GYWxzZQpTb2NpYWxJbXBvcnRQcm9tcHRDb3VudEN1cnJlbnRWZXJzaW9uPTEKU29jaWFsSW1wb3J0UHJvbXB0Q291bnRBbGxWZXJzaW9ucz0xClZLSW1wb3J0UHJvbXB0Q291bnRDdXJyZW50VmVyc2lvbj0wClZLSW1wb3J0UHJvbXB0Q291bnRBbGxWZXJzaW9ucz0wCkxhc3RBY2NvdW50SXRlbVdhcm5pbmdUaW1lPTAwMDEuMDEuMDEtMDAuMDAuMDAKYk11bHRpRmFjdG9yQXV0aE1vZGFsT3BPdXQ9RmFsc2UKTGFzdEVuYWJsZU1GQU1vZGFsUHJvbXB0VGltZT0wMDAxLjAxLjAxLTAwLjAwLjAwCkxhc3RWS0ltcG9ydFByb21wdFRpbWU9MDAwMS4wMS4wMS0wMC4wMC4wMApMYXN0QWZmaWxpYXRlVG9hc3RUaW1lPTIwMjMuMDguMTUtMjMuMjguMDkKRmFpbGVkSW52aXRlTWFwPSgpCk1vYmlsZVJlY29tbWVuZGF0aW9uRGlzbWlzc2VkVmVyc2lvbj0wClNob3dMaXZlU3RyZWFtUGljdHVyZUluUGljdHVyZUluTWF0Y2hWMj1EZWZhdWx0CkN1cnJlbnRMaXZlUGlQU3RyZWFtT3ZlcnJpZGVDb3VudGVyPTAKU2VsZWN0ZWRGcm9udEVuZD0KYk5ldmVyU2hvd01vYmlsZUxpbms9RmFsc2UKYkhhc01pZ3JhdGVkRG93bmxvYWRTZXR0aW5ncz1GYWxzZQpiU2VuZEFwcHNGbHllckV2ZW50T25JbnN0YWxsYXRpb249VHJ1ZQpiQWxsb3dGdWxsR2FtZURvd25sb2FkPUZhbHNlCmJBbGxvd0NlbGx1bGFyRG93bmxvYWQ9RmFsc2UKTGFzdEF1dG9Eb3dubG9hZEhpZ2hSZXNUZXh0dXJlUmVtaW5kZXI9NjM4Mzg5NDI1NjAxOTkwMDAwCmJBdXRvTGF1bmNoRnVsbEdhbWU9RmFsc2UKYkFsbG93RG93bmxvYWRIaWdoUmVzTWlwcz1GYWxzZQpDb250ZW50UXVhbGl0eUxldmVsU2VsZWN0ZWQ9VW5zZXQKYkFsbG93TG93UG93ZXJNb2RlPUZhbHNlCmJBbGxvd1ZpZGVvUGxheWJhY2s9VHJ1ZQpNb2JpbGVGUFNNb2RlPU1vZGVfMzBGcHMKTW9iaWxlUXVhbGl0eVNldHRpbmdzUmVzZXREZWZhdWx0c0dVSUQ9CmJIYXNTZWVuU2Ftc3VuZ1ByZXNzdXJlU2Vuc29yV2FybmluZz1GYWxzZQpiTmV2ZXJEaXNwbGF5U2Ftc3VuZ1ByZXNzdXJlU2Vuc29yV2FybmluZz1GYWxzZQpiSGFzUmVjZW50bHlTZWVuQmFkTWF0Y2hQb3B1cD1GYWxzZQpNYXRjaGVzU2luY2VMYXN0QmFkTWF0Y2hQb3B1cD0wCmJIYXNBbHJlYWR5UmF0ZWRPbkdvb2dsZVBsYXk9RmFsc2UKRGF5c1RvU25vb3plQmVmb3JlTmV4dEdvb2dsZVBsYXlSYXRpbmc9MApHb29nbGVQbGF5UmF0aW5nRGVsYXllZE9jY3VyZW5jZXM9MApiU2hvd1RlbXBlcmF0dXJlPUZhbHNlCkxhc3RHYW1lU3RhcnROb3RpZmljYXRpb25TZW50VGltZT0wMDAxLjAxLjAxLTAwLjAwLjAwCkxhc3RZZWFyRm9yY2VkRGlzcGxheVdpbnRlcmZlc3RJbmZvQnV0dG9uPTAKTGFzdFllYXJXaW50ZXJmZXN0V2FzU2Vlbj0wCmJIYXNTZWVuU2lkZWtpY2tXZWxjb21lUG9wdXA9RmFsc2UKYkhhc1NlZW5Mb2JieU1vZGVTZXROb3RpZmljYXRpb249VHJ1ZQpiSGFzU2VlbkxvYmJ5TW9kZUNoYW5nZWROb3RpZmljYXRpb249VHJ1ZQpiSGFzU2VlbkRpc2NvdmVyeU1vZGVTZXROb3RpZmljYXRpb249VHJ1ZQpiSGFzU2VlbkRpc2NvdmVyeUNDVU1vZGFsPVRydWUKSGFzU2VlbkRpc2NvdmVyeURldGFpbHNNb2RlU2V0Tm90aWZpY2F0aW9uTW5lbW9uaWNzPSgpCmJIYXNTZWVuQ3JlYXRvclBhZ2VGaXJzdFRpbWVUb29sdGlwPVRydWUKTG93SW5wdXRMYXRlbmN5TW9kZUlzRW5hYmxlZD1UcnVlCmJOZWVkc1RvU2VlRmlyZU1vZGVTZWxlY3Rpb25SZW1pbmRlcj1GYWxzZQpNYXRjaGVzU2luY2VJbml0aWFsRmlyZU1vZGVTZWxlY3Rpb249MApiVXNlVlN5bmM9RmFsc2UKYlVzZUR5bmFtaWNSZXNvbHV0aW9uPUZhbHNlClJlc29sdXRpb25TaXplWD0xOTIwClJlc29sdXRpb25TaXplWT0xMDgwCkxhc3RVc2VyQ29uZmlybWVkUmVzb2x1dGlvblNpemVYPTE5MjAKTGFzdFVzZXJDb25maXJtZWRSZXNvbHV0aW9uU2l6ZVk9MTA4MApXaW5kb3dQb3NYPS0xCldpbmRvd1Bvc1k9LTEKTGFzdENvbmZpcm1lZEZ1bGxzY3JlZW5Nb2RlPTAKUHJlZmVycmVkRnVsbHNjcmVlbk1vZGU9MApBdWRpb1F1YWxpdHlMZXZlbD0wCkxhc3RDb25maXJtZWRBdWRpb1F1YWxpdHlMZXZlbD0wCkZyYW1lUmF0ZUxpbWl0PTE4MC4wMDAwMDAKRGVzaXJlZFNjcmVlbldpZHRoPTE5MjAKRGVzaXJlZFNjcmVlbkhlaWdodD0xMDgwCkxhc3RVc2VyQ29uZmlybWVkRGVzaXJlZFNjcmVlbldpZHRoPTE5MjAKTGFzdFVzZXJDb25maXJtZWREZXNpcmVkU2NyZWVuSGVpZ2h0PTEwODAKTGFzdFJlY29tbWVuZGVkU2NyZWVuV2lkdGg9LTEuMDAwMDAwCkxhc3RSZWNvbW1lbmRlZFNjcmVlbkhlaWdodD0tMS4wMDAwMDAKTGFzdENQVUJlbmNobWFya1Jlc3VsdD0xOTIuODE2NzI3Ckxhc3RHUFVCZW5jaG1hcmtSZXN1bHQ9MTk0LjMxOTAzMQpMYXN0R1BVQmVuY2htYXJrTXVsdGlwbGllcj0xLjAwMDAwMApiVXNlSERSRGlzcGxheU91dHB1dD1GYWxzZQpIRFJEaXNwbGF5T3V0cHV0Tml0cz0xMDAwCkxhc3RDUFVCZW5jaG1hcmtTdGVwcz0xNjIuNTk2NzU2Ckxhc3RDUFVCZW5jaG1hcmtTdGVwcz0yMTIuOTYzMzY0Ckxhc3RHUFVCZW5jaG1hcmtTdGVwcz0yNTIuMjYyMjUzCkxhc3RHUFVCZW5jaG1hcmtTdGVwcz0xMjMuNTYyMDQyCkxhc3RHUFVCZW5jaG1hcmtTdGVwcz0yMTkuNDIwNzE1Ckxhc3RHUFVCZW5jaG1hcmtTdGVwcz0yMDUuNzExNzMxCkxhc3RHUFVCZW5jaG1hcmtTdGVwcz0xMDYuNzYzMjk4Ckxhc3RHUFVCZW5jaG1hcmtTdGVwcz0yNTMuNjU0NDA0Ckxhc3RHUFVCZW5jaG1hcmtTdGVwcz0zNzcuMjEyNDk0CkF1dG9Eb3dubG9hZEhpZ2hSZXNUZXh0dXJlc0JlaGF2aW9yPURpc2FibGVkX1Blcm1hbmVudApiSGFzVXNlclNlZW5Mb2NrZXJBY3Rpb25CYXJUb29sdGlwPVRydWUKYkNvc21ldGljU3RyZWFtaW5nRW5hYmxlZD1UcnVlCkNvc21ldGljU3RyZWFtaW5nRW5hYmxlZD1Db2RlU2V0X0Rpc2FibGVkClJlbWVtYmVyTWVDaGVja2JveD1GYWxzZQpSZW1lbWJlck1lVG9rZW49Ckxhc3RMb2dpbkVtYWlsPQpEaXNjcmV0ZVJlc29sdXRpb25RdWFsaXR5PTIKTGFzdFNlZW5BdGhlbmFTdG9yZVJlZnJlc2hUaW1lPTIwMjMuMDkuMDMtMDAuMDAuMDAKTGFzdFNlZW5BdGhlbmFTdG9yZVdlZWtseUVuZFRpbWU9MjAyMy4wOS4wMy0yMy41OS41OQpIVURMYXlvdXRVc2FnZURhdGE9KE51bU9mVGltZXNPcGVuZWQ9MCxOdW1PZlRpbWVzUmVzZXQ9MCxOdW1PZlRpbWVzU2F2ZWQ9MCxOdW1PZlRpbWVzUGFubmluZz0wKQpiSGFzU2VlblBhbm5pbmdUaXA9RmFsc2UKTGFzdFBsYXlsaXN0SW5mb1ZlcnNpb25WaWV3ZWRCUj0yMDE5LTEwLTI5VDE0OjA1OjE3LjAzWgpiRW5hYmxlRExTU0ZyYW1lR2VuZXJhdGlvbj1GYWxzZQpSb3dJZFRvT2ZmZXJTZWVuTGV2ZWw9KCgiUnVmdXMxLjk5IiwgT2ZmZXJTZWN0aW9uVmlzaXRlZCksKCJSdWZ1czQuOTkiLCBPZmZlclNlY3Rpb25WaXNpdGVkKSwoIlJ1ZnVzNS45OSIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiUnVmdXM3Ljk5IiwgT2ZmZXJTZWN0aW9uVmlzaXRlZCksKCJSdWZ1czguOTkiLCBPZmZlclNlY3Rpb25WaXNpdGVkKSwoIlJ1ZnVzOS45OSIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiUnVmdXMxMC45OSIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiUnVmdXMxMS45OSIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiUnVmdXMxMy45OSIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiUnVmdXMxNC45OSIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiUnVmdXMyMC45OSIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiUnVmdXMyMC45OCIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiUnVmdXMyMC45NyIsIEl0ZW1TaG9wVmlzaXRlZCksKCJCYXR0bGVQYXNzLjEiLCBJdGVtU2hvcFZpc2l0ZWQpLCgiU3Vic2NyaXB0aW9uLjEiLCBPZmZlclNlY3Rpb25WaXNpdGVkKSwoIlNxdWFkb3JpZ2lucy45OSIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiU3F1YWRvcmlnaW5zLjk4IiwgT2ZmZXJTZWN0aW9uVmlzaXRlZCksKCJTcXVhZG9yaWdpbnMuOTciLCBJdGVtU2hvcFZpc2l0ZWQpLCgiUnVmdXNGdXR1cmFtYS45OSIsIEl0ZW1TaG9wVmlzaXRlZCksKCJSdWZ1c0Z1dHVyYW1hLjk4IiwgSXRlbVNob3BWaXNpdGVkKSwoIlJ1ZnVzMjEuOTkiLCBPZmZlclNlY3Rpb25WaXNpdGVkKSwoIlJ1ZnVzMjEuOTgiLCBPZmZlclNlY3Rpb25WaXNpdGVkKSwoIlJ1ZnVzMjEuOTciLCBPZmZlclNlY3Rpb25WaXNpdGVkKSwoIlJ1ZnVzMjEuOTYiLCBPZmZlclNlY3Rpb25WaXNpdGVkKSwoIlJ1ZnVzSW52aW5jaWJsZS45OSIsIEl0ZW1TaG9wVmlzaXRlZCksKCJSdWZ1c0ludmluY2libGUuOTgiLCBJdGVtU2hvcFZpc2l0ZWQpLCgiUnVmdXMyMS45NSIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiUnVmdXMyMS45NCIsIEl0ZW1TaG9wVmlzaXRlZCksKCJSdWZ1czIxLjkzIiwgT2ZmZXJTZWN0aW9uVmlzaXRlZCksKCJTdGFyd2Fyc1RvcC45OSIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiU3RhcndhcnNUb3AuOTgiLCBPZmZlclNlY3Rpb25WaXNpdGVkKSwoIkdvYWxib3VuZC45OSIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiR29hbGJvdW5kLjk4IiwgT2ZmZXJTZWN0aW9uVmlzaXRlZCksKCJHb2FsYm91bmQuOTciLCBJdGVtU2hvcFZpc2l0ZWQpLCgiSm9obkNlbmEuOTkiLCBJdGVtU2hvcFZpc2l0ZWQpLCgiU2hvd3lvdXJzdHlsZS5TaG93V3JhcHNvbllvdXJPdXRmaXRzLjk5IiwgSXRlbVNob3BWaXNpdGVkKSwoIlNob3d5b3Vyc3R5bGUuU2hvd1dyYXBzb25Zb3VyT3V0Zml0cy45OCIsIEl0ZW1TaG9wVmlzaXRlZCksKCJTaG93eW91cnN0eWxlLldyYXBzX0dlYXIuOTciLCBJdGVtU2hvcFZpc2l0ZWQpLCgiS2lkTGFyb2kuOTkiLCBPZmZlclNlY3Rpb25WaXNpdGVkKSwoIktpZExhcm9pLjk4IiwgT2ZmZXJTZWN0aW9uVmlzaXRlZCksKCJSdWZ1c01hcnZlbC45OSIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiUnVmdXNFbWluZW0uOTkiLCBJdGVtU2hvcFZpc2l0ZWQpLCgiUnVmdXNFbWluZW0uOTgiLCBPZmZlclNlY3Rpb25WaXNpdGVkKSwoIlJ1ZnVzMjEuRmVhcmxlc3NGYWlyd2F5Ljk2IiwgT2ZmZXJTZWN0aW9uVmlzaXRlZCksKCJSdWZ1czIxLkZlYXJsZXNzRmFpcndheS45NSIsIEl0ZW1TaG9wVmlzaXRlZCksKCJFbWluZW0uOTkiLCBPZmZlclNlY3Rpb25WaXNpdGVkKSwoIkVtaW5lbS45OCIsIEl0ZW1TaG9wVmlzaXRlZCksKCJPR0ZhdnMuOTkiLCBJdGVtU2hvcFZpc2l0ZWQpLCgiT0dGYXZzLjk4IiwgT2ZmZXJTZWN0aW9uVmlzaXRlZCksKCJPR0ZhdlN0cmFuZ2VyVGhpbmdzLjk5IiwgT2ZmZXJTZWN0aW9uVmlzaXRlZCksKCJPR0ZhdlN0cmFuZ2VyVGhpbmdzLjk4IiwgT2ZmZXJTZWN0aW9uVmlzaXRlZCksKCJUdXJuTXVzaWNVcC45OSIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiVHVybk11c2ljVXAuOTgiLCBJdGVtU2hvcFZpc2l0ZWQpLCgiVHVybk11c2ljVXAuOTciLCBJdGVtU2hvcFZpc2l0ZWQpLCgiVHVybk11c2ljVXAuOTYiLCBJdGVtU2hvcFZpc2l0ZWQpLCgiUnVmdXNMZXdpcy45OSIsIEl0ZW1TaG9wVmlzaXRlZCksKCJSdWZ1c0xld2lzLjk4IiwgSXRlbVNob3BWaXNpdGVkKSwoIkphY2tTa2VsbGluZ3Rvbi45OSIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiRW1pbmVtTm9FbW90ZS5TbGltU2hhZHkuOTkiLCBJdGVtU2hvcFZpc2l0ZWQpLCgiRW1pbmVtTm9FbW90ZS5NYXJzaGFsbE5ldmVyTW9yZS45OCIsIEl0ZW1TaG9wVmlzaXRlZCksKCJUaXNUaGVTZWFzb24uOTkiLCBPZmZlclNlY3Rpb25WaXNpdGVkKSwoIlRpc1RoZVNlYXNvbi45OCIsIEl0ZW1TaG9wVmlzaXRlZCksKCJUaXNUaGVTZWFzb24uOTciLCBPZmZlclNlY3Rpb25WaXNpdGVkKSwoIk11c2ljU2hvcHBvc3RydWZ1cy1jaGFuZ2VzLkhpdFRoZUJlYXQuOTkiLCBJdGVtU2hvcFZpc2l0ZWQpLCgiTXVzaWNTaG9wcG9zdHJ1ZnVzLWNoYW5nZXMuSGl0VGhlQmVhdC45OCIsIEl0ZW1TaG9wVmlzaXRlZCksKCJTZWNyZXRFc3Bpb25hZ2UuUmF2ZU5hdXRpbHVzLjk5IiwgT2ZmZXJTZWN0aW9uVmlzaXRlZCksKCJTZWNyZXRFc3Bpb25hZ2UuTHVjaWVuV2VzdC45OCIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiREMuSGFybGV5UXVpbm4uOTkiLCBPZmZlclNlY3Rpb25WaXNpdGVkKSwoIkRDLkJsYWNrTWFudGFfQmVhc3RCb3kuOTgiLCBJdGVtU2hvcFZpc2l0ZWQpLCgiTGltaXRlZFRpbWUuNCIsIEl0ZW1TaG9wVmlzaXRlZCksKCJBZHZlbnR1cmVQZWVseS45OSIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiU3RhcnRZb3VyRW5naW5lcy5DeWNsb25lLjk4IiwgSXRlbVNob3BWaXNpdGVkKSwoIlN0YXJ0WW91ckVuZ2luZXMuSmFnZXI2MTkuOTciLCBJdGVtU2hvcFZpc2l0ZWQpLCgiU3RhcnRZb3VyRW5naW5lcy5EaWVzZWwuOTkiLCBJdGVtU2hvcFZpc2l0ZWQpLCgiU2lnbmF0dXJlU3R5bGUuOTQiLCBPZmZlclNlY3Rpb25WaXNpdGVkKSwoIlNpZ25hdHVyZVN0eWxlLlZlcmdlLjk4IiwgSXRlbVNob3BWaXNpdGVkKSwoIlNpZ25hdHVyZVN0eWxlLkN1ZGRsZVRlYW0uOTciLCBVbnNlZW4pLCgiU2lnbmF0dXJlU3R5bGUuVG95U29sZGllci45NSIsIEl0ZW1TaG9wVmlzaXRlZCksKCJTaWduYXR1cmVTdHlsZS5EdW1teUJyaWdhZGUuOTkiLCBJdGVtU2hvcFZpc2l0ZWQpLCgiU2lnbmF0dXJlU3R5bGUuR2FsYXh5UGFjay45NiIsIEl0ZW1TaG9wVmlzaXRlZCksKCJGb3J0bml0ZUZsYWlyLjk4IiwgT2ZmZXJTZWN0aW9uVmlzaXRlZCksKCJGb3J0bml0ZUZsYWlyLjk3IiwgVW5zZWVuKSwoIkZvcnRuaXRlRmxhaXIuOTYiLCBJdGVtU2hvcFZpc2l0ZWQpLCgiRm9ydG5pdGVGbGFpci45OSIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiQmF0dGxlUGFzc0NyZXcuMSIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiR2VhckZvckZlc3RpdmFsLjk5IiwgT2ZmZXJTZWN0aW9uVmlzaXRlZCksKCJKYW1UcmFja3MuOTkiLCBPZmZlclNlY3Rpb25WaXNpdGVkKSwoIkxpbWl0ZWRUaW1lLlZNVCIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiU2lnbmF0dXJlU3R5bGUuTmVvbkdsb3cuOTYiLCBJdGVtU2hvcFZpc2l0ZWQpLCgiU2lnbmF0dXJlU3R5bGUuSHVzaC45NyIsIEl0ZW1TaG9wVmlzaXRlZCksKCJTaWduYXR1cmVTdHlsZS5UaGVCcmF0Ljk4IiwgSXRlbVNob3BWaXNpdGVkKSwoIlNpZ25hdHVyZVN0eWxlLkRyZWFtLjk5IiwgSXRlbVNob3BWaXNpdGVkKSwoIkRhcmtsYW5kczEuRGFya0JvbWJlci45OSIsIEl0ZW1TaG9wVmlzaXRlZCksKCJIZXJvQWNhQWxsLjk3IiwgSXRlbVNob3BWaXNpdGVkKSwoIkhlcm9BY2FBbGwuOTYiLCBJdGVtU2hvcFZpc2l0ZWQpLCgiSGVyb0FjYUFsbC45NSIsIEl0ZW1TaG9wVmlzaXRlZCksKCJIZXJvQWNhQWxsLkFsbE1pZ2h0Ljk5IiwgSXRlbVNob3BWaXNpdGVkKSwoIkhlcm9BY2FBbGwuQ2xhc3MxLUFIZXJvZXMuOTgiLCBJdGVtU2hvcFZpc2l0ZWQpLCgiVGhlV2Vla25kLjk5IiwgT2ZmZXJTZWN0aW9uVmlzaXRlZCksKCJMaW1pdGVkVGltZS4yIiwgT2ZmZXJTZWN0aW9uVmlzaXRlZCksKCJUTU5ULjk5IiwgSXRlbVNob3BWaXNpdGVkKSwoIlRNTlQuOTgiLCBJdGVtU2hvcFZpc2l0ZWQpLCgiVE1OVC45NyIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiTXJCZWFzdC45OSIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiU2lnbmF0dXJlU3R5bGUuS3lyYS45OSIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiV2ludGVyZmVzdC45OSIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiV2ludGVyZmVzdC45OCIsIEl0ZW1TaG9wVmlzaXRlZCksKCJKdWp1dHN1S2Fpc2VuLjk4IiwgSXRlbVNob3BWaXNpdGVkKSwoIkp1anV0c3VLYWlzZW4uOTkiLCBJdGVtU2hvcFZpc2l0ZWQpLCgiRnV0dXJlV2FyQi45OSIsIEl0ZW1TaG9wVmlzaXRlZCksKCJSaWNrTW9ydHkuOTkiLCBJdGVtU2hvcFZpc2l0ZWQpLCgiUmlja01vcnR5Ljk4IiwgSXRlbVNob3BWaXNpdGVkKSwoIlJpY2tNb3J0eS45NyIsIEl0ZW1TaG9wVmlzaXRlZCksKCJKYW1UcmFja3MuOTgiLCBPZmZlclNlY3Rpb25WaXNpdGVkKSwoIkphbVRyYWNrcy45NyIsIE9mZmVyU2VjdGlvblZpc2l0ZWQpLCgiU2lnbmF0dXJlU3R5bGUuOTkiLCBPZmZlclNlY3Rpb25WaXNpdGVkKSwoIlNpZ25hdHVyZVN0eWxlLkt5cmEuOTgiLCBJdGVtU2hvcFZpc2l0ZWQpLCgiV2ludGVyZmVzdE5ldy45OSIsIEl0ZW1TaG9wVmlzaXRlZCksKCJXaW50ZXJmZXN0TmV3Ljk4IiwgSXRlbVNob3BWaXNpdGVkKSwoIldpbnRlcmZlc3ROZXcuOTciLCBJdGVtU2hvcFZpc2l0ZWQpLCgiSm9obldpY2suOTkiLCBJdGVtU2hvcFZpc2l0ZWQpKQpMYXN0RXhwZWN0ZWRTaG9wUmVmcmVzaFRpbWU9MjAyMy4xMi4yMy0wMC4wMC4wMApiSGFzU2Vlbkl0ZW1TaG9wPVRydWUKYkhhc1NlZW5Mb2NrZXJUZW1wb3JhcnlJdGVtc1Rvb2x0aXA9RmFsc2UKYkxvY2tlckhpZGVVbnN1cHBvcnRlZEl0ZW1zPUZhbHNlCmJIYXNTZWVuSnVub091dGZpdHNGVFVFPVRydWUKRnVsbHNjcmVlbk1vZGU9MAoKW1JheVRyYWNpbmddCnIuUmF5VHJhY2luZy5FbmFibGVJbkdhbWU9VHJ1ZQoKW1NjYWxhYmlsaXR5R3JvdXBzXQpzZy5SZXNvbHV0aW9uUXVhbGl0eT0xMDAKc2cuVmlld0Rpc3RhbmNlUXVhbGl0eT0yCnNnLkFudGlBbGlhc2luZ1F1YWxpdHk9MwpzZy5TaGFkb3dRdWFsaXR5PTIKc2cuR2xvYmFsSWxsdW1pbmF0aW9uUXVhbGl0eT0yCnNnLlJlZmxlY3Rpb25RdWFsaXR5PTIKc2cuUG9zdFByb2Nlc3NRdWFsaXR5PTAKc2cuVGV4dHVyZVF1YWxpdHk9MgpzZy5FZmZlY3RzUXVhbGl0eT0yCnNnLkZvbGlhZ2VRdWFsaXR5PTIKc2cuU2hhZGluZ1F1YWxpdHk9MgpzZy5MYW5kc2NhcGVRdWFsaXR5PTIKCltDaGF0U2V0dGluZ3NdCkhpZGVTb2NpYWxOYW1lPUZhbHNlCkF1dG9JbXBvcnRGcmllbmRzPUZhbHNlClNob3dOb3RpZmljYXRpb25zPVRydWUKTmV2ZXJGYWRlTWVzc2FnZXM9VHJ1ZQpTaG93VGltZVN0YW1wcz1UcnVlClNob3dXaGlzcGVyc0luQWxsVGFicz1UcnVlClNob3dDdXN0b21UYWI9RmFsc2UKU2hvd1doaXNwZXJzVGFiPUZhbHNlClNob3dHbG9iYWxUYWI9VHJ1ZQpTaG93Q29tYmF0QW5kRXZlbnRzVGFiPVRydWUKU2hvd0NsYW5UYWJzPVRydWUKSGlkZU9mZmxpbmU9RmFsc2UKSGlkZU91dGdvaW5nPUZhbHNlCkhpZGVTdWdnZXN0aW9ucz1GYWxzZQpIaWRlUmVjZW50PUZhbHNlCkhpZGVCbG9ja2VkPVRydWUKRmlsdGVyTWF0dXJlTGFuZ3VhZ2U9VHJ1ZQpEaXNwbGF5Q2hhcmFjdGVyTmFtZXM9RmFsc2UKRnJpZW5kSW52aXRlUmVjZWl2ZWRDdWVFbmFibGVkPUZhbHNlCkdhbWVPclBhcnR5SW52aXRlUmVjZWl2ZWRDdWVFbmFibGVkPUZhbHNlCk1lc3NhZ2VSZWNlaXZlZEN1ZUVuYWJsZWQ9RmFsc2UKU291bmRFbmFibGVkPUZhbHNlClNob3dUZXh0Q2hhdD1UcnVlCkZvbnRTaXplPTEKV2luZG93SGVpZ2h0PTEKV2luZG93T3BhY2l0eT0wLjUKQXV0b0RlY2xpbmVGcmllbmRSZXF1ZXN0cz1GYWxzZQoKW0QzRFJISVByZWZlcmVuY2VdClByZWZlcnJlZFJIST1keDEyClByZWZlcnJlZEZlYXR1cmVMZXZlbD1zbTYKCltTaGFkZXJQaXBlbGluZUNhY2hlLkNhY2hlRmlsZV0KTGFzdE9wZW5lZD1Gb3J0bml0ZUdhbWUKCltQZXJmb3JtYW5jZU1vZGVdCk1lc2hRdWFsaXR5PTAKCg=="
    return decode(string)


def dx11() -> str:
    string = ""
    return decode(string)
